;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_utoa
	.import		_sprintf
	.export		_portb_buffer
	.export		_lcd_isBusy
	.export		_lcd_instruction
	.export		_init_lcd
	.export		_print
	.export		_print_str
	.export		_myInt
	.export		_numberString
	.export		_outputString
	.export		_main

.segment	"DATA"

_portb_buffer:
	.byte	$00
_myInt:
	.word	$FFFF

.segment	"RODATA"

L007D:
	.byte	$25,$73,$20,$2D,$3E,$20,$25,$75,$00

.segment	"BSS"

_numberString:
	.res	5,$00
_outputString:
	.res	40,$00

; ---------------------------------------------------------------
; signed short __near__ lcd_isBusy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lcd_isBusy: near

.segment	"CODE"

	lda     #$00
	sta     $6002
	lda     #$40
	sta     $6001
	lda     #$C0
	sta     $6001
	lda     $6000
	sta     _portb_buffer
	lda     #$40
	sta     $6001
	lda     _portb_buffer
	ldx     #$00
	and     #$80
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ lcd_instruction (signed short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lcd_instruction: near

.segment	"CODE"

	jsr     pushax
L001D:	jsr     _lcd_isBusy
	stx     tmp1
	ora     tmp1
	bne     L001D
	lda     #$FF
	sta     $6002
	ldy     #$00
	lda     (sp),y
	sta     $6000
	sty     $6001
	lda     #$80
	sta     $6001
	sty     $6001
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ init_lcd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_lcd: near

.segment	"CODE"

	lda     #$FF
	sta     $6002
	sta     $6003
	ldx     #$00
	lda     #$38
	jsr     _lcd_instruction
	ldx     #$00
	lda     #$0E
	jmp     _lcd_instruction

.endproc

; ---------------------------------------------------------------
; void __near__ print (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print: near

.segment	"CODE"

	jsr     pusha
L004A:	jsr     _lcd_isBusy
	stx     tmp1
	ora     tmp1
	bne     L004A
	lda     #$FF
	sta     $6002
	ldy     #$00
	lda     (sp),y
	sta     $6000
	lda     #$20
	sta     $6001
	lda     #$A0
	sta     $6001
	lda     #$20
	sta     $6001
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ print_str (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_str: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldy     #$03
	jsr     ldaxysp
L008A:	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	beq     L0069
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _print
	jsr     ldax0sp
	jsr     incax1
	jmp     L008A
L0069:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     _myInt
	ldx     _myInt+1
	jsr     pushax
	lda     #<(_numberString)
	ldx     #>(_numberString)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _utoa
	jsr     _init_lcd
	lda     #<(_outputString)
	ldx     #>(_outputString)
	jsr     pushax
	lda     #<(L007D)
	ldx     #>(L007D)
	jsr     pushax
	lda     #<(_numberString)
	ldx     #>(_numberString)
	jsr     pushax
	lda     _myInt
	ldx     _myInt+1
	jsr     pushax
	ldy     #$08
	jsr     _sprintf
	lda     #<(_outputString)
	ldx     #>(_outputString)
	jsr     _print_str
L008B:	jmp     L008B

.endproc

